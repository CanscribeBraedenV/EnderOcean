[gd_scene load_steps=23 format=2]

[ext_resource path="res://addons/zylann.hterrain/hterrain_texture_set.gd" type="Script" id=1]
[ext_resource path="res://scripts/move_boat.gd" type="Script" id=2]
[ext_resource path="res://addons/zylann.hterrain/hterrain.gd" type="Script" id=3]
[ext_resource path="res://terrains/level_02/grass/Ground037_1K_NormalGL.jpg" type="Texture" id=4]
[ext_resource path="res://terrains/level_01/brown_sand/Ground049B_1K_Color.jpg" type="Texture" id=5]
[ext_resource path="res://terrains/level_01/grass/Ground037_1K_Color.jpg" type="Texture" id=6]
[ext_resource path="res://terrains/level_01/grass/Ground037_1K_NormalGL.jpg" type="Texture" id=7]
[ext_resource path="res://scenes/rope/rope.gd" type="Script" id=8]
[ext_resource path="res://terrains/level_02/grass/Ground037_1K_Displacement.jpg" type="Texture" id=9]
[ext_resource path="res://terrains/level_02/white_sand/Ground051_1K_NormalGL.jpg" type="Texture" id=10]
[ext_resource path="res://scenes/water.tscn" type="PackedScene" id=11]
[ext_resource path="res://terrains/level_02/data.hterrain" type="Resource" id=12]
[ext_resource path="res://scripts/level.gd" type="Script" id=13]
[ext_resource path="res://terrains/level_02/white_sand/Ground051_1K_Color.jpg" type="Texture" id=14]
[ext_resource path="res://assets/models/vehicles/Marlow66.obj" type="ArrayMesh" id=15]
[ext_resource path="res://scenes/bluerovheavy/BlueRovHeavy.tscn" type="PackedScene" id=16]
[ext_resource path="res://assets/sounds/Ender-Ambient-Underwater-Loop.wav" type="AudioStream" id=17]
[ext_resource path="res://scripts/targetPos.gd" type="Script" id=18]

[sub_resource type="GDScript" id=4]
script/source = "# Licensed under the MIT License.
# Copyright (c) 2018-2020 Jaccomo Lorenz (Maujoe)

extends Spatial

# User settings:
# General settings
export var enabled = true setget set_enabled

# See https://docs.godotengine.org/en/latest/classes/class_input.html?highlight=Input#enumerations
export(int, \"Visible\", \"Hidden\", \"Captured, Confined\") var mouse_mode = Input.MOUSE_MODE_CAPTURED

enum Freelook_Modes {MOUSE, INPUT_ACTION, MOUSE_AND_INPUT_ACTION}

# Freelook settings
export var freelook = true
export (Freelook_Modes) var freelook_mode = 2
export (float, 0.0, 1.0) var sensitivity = 0.5
export (float, 0.0, 0.999, 0.001) var smoothness = 0.5 setget set_smoothness
export (int, 0, 360) var yaw_limit = 360
export (int, 0, 360) var pitch_limit = 360

# Pivot Settings
export(NodePath) var privot setget set_privot
export var distance = 5.0 setget set_distance
export var rotate_privot = false
export var collisions = true setget set_collisions

# Movement settings
export var movement = true
export (float, 0.0, 5.0) var acceleration = 5.0
export (float, 0.0, 0.0, 1.0) var deceleration = 0.1
export var max_speed = Vector3(15.0, 15.0, 15.0)
export var local = true

# Input Actions
export var rotate_left_action = \"\"
export var rotate_right_action = \"\"
export var rotate_up_action = \"\"
export var rotate_down_action = \"\"
export var forward_action = \"player_up\"
export var backward_action = \"player_down\"
export var left_action = \"player_left\"
export var right_action = \"player_right\"
export var up_action = \"camera_upwards\"
export var down_action = \"camera_downwards\"
export var trigger_action = \"camera_trigger\"

# Gui settings
export var use_gui = true
export var gui_action = \"ui_cancel\"

# Intern variables.
var _mouse_offset = Vector2()
var _rotation_offset = Vector2()
var _yaw = 0.0
var _pitch = 0.0
var _total_yaw = 0.0
var _total_pitch = 0.0

var _direction = Vector3(0.0, 0.0, 0.0)
var _speed = Vector3(0.0, 0.0, 0.0)
var _gui

var _triggered=false

const ROTATION_MULTIPLIER = 500

func _ready():
	_check_actions([
		forward_action,
		backward_action,
		left_action,
		right_action,
		gui_action,
		up_action,
		down_action,
		rotate_left_action,
		rotate_right_action,
		rotate_up_action,
		rotate_down_action
	])

	if privot:
		privot = get_node(privot)
	else:
		privot = null

	set_enabled(enabled)


func _input(event):
		if len(trigger_action)!=0:
			if event.is_action_pressed(trigger_action):
				_triggered=true
			elif event.is_action_released(trigger_action):
				_triggered=false
		else:
			_triggered=true
		if freelook and _triggered:
			if event is InputEventMouseMotion:
				_mouse_offset = event.relative
				
#			_rotation_offset.x = Input.get_action_strength(rotate_right_action) - Input.get_action_strength(rotate_left_action)
#			_rotation_offset.y = Input.get_action_strength(rotate_down_action) - Input.get_action_strength(rotate_up_action)
	
		if movement and _triggered:
			_direction.x = Input.get_action_strength(right_action) - Input.get_action_strength(left_action)
			_direction.y = Input.get_action_strength(up_action) - Input.get_action_strength(down_action)
			_direction.z = Input.get_action_strength(backward_action) - Input.get_action_strength(forward_action)

func _process(delta):
	if _triggered:
		_update_views(delta)

func _update_views(delta):
	if privot:
		_update_distance()
	if freelook:
		_update_rotation(delta)
	if movement:
		_update_movement(delta)

func _physics_process(delta):
	if _triggered:
		_update_views_physics(delta)

func _update_views_physics(delta):
	# Called when collision are enabled
	_update_distance()
	if freelook:
		_update_rotation(delta)

	var space_state = get_world().get_direct_space_state()
	var obstacle = space_state.intersect_ray(privot.get_translation(),  get_translation())
	if not obstacle.empty():
		set_translation(obstacle.position)

func _update_movement(delta):
	var offset = max_speed * acceleration * _direction

	_speed.x = clamp(_speed.x + offset.x, -max_speed.x, max_speed.x)
	_speed.y = clamp(_speed.y + offset.y, -max_speed.y, max_speed.y)
	_speed.z = clamp(_speed.z + offset.z, -max_speed.z, max_speed.z)

	# Apply deceleration if no input
	if _direction.x == 0:
		_speed.x *= (1.0 - deceleration)
	if _direction.y == 0:
		_speed.y *= (1.0 - deceleration)
	if _direction.z == 0:
		_speed.z *= (1.0 - deceleration)

	if local:
		translate(_speed * delta)
	else:
		global_translate(_speed * delta)

func _update_rotation(delta):
	var offset = Vector2();
	
	if not freelook_mode == Freelook_Modes.INPUT_ACTION:
		offset += _mouse_offset * sensitivity
	if not freelook_mode == Freelook_Modes.MOUSE: 
		offset += _rotation_offset * sensitivity * ROTATION_MULTIPLIER * delta
	
	_mouse_offset = Vector2()

	_yaw = _yaw * smoothness + offset.x * (1.0 - smoothness)
	_pitch = _pitch * smoothness + offset.y * (1.0 - smoothness)

	if yaw_limit < 360:
		_yaw = clamp(_yaw, -yaw_limit - _total_yaw, yaw_limit - _total_yaw)
	if pitch_limit < 360:
		_pitch = clamp(_pitch, -pitch_limit - _total_pitch, pitch_limit - _total_pitch)

	_total_yaw += _yaw
	_total_pitch += _pitch

	if privot:
		var target = privot.get_translation()
		var dist = get_translation().distance_to(target)

		set_translation(target)
		rotate_y(deg2rad(-_yaw))
		rotate_object_local(Vector3(1,0,0), deg2rad(-_pitch))
		translate(Vector3(0.0, 0.0, dist))

		if rotate_privot:
			privot.rotate_y(deg2rad(-_yaw))
	else:
		rotate_y(deg2rad(-_yaw))
		rotate_object_local(Vector3(1,0,0), deg2rad(-_pitch))

func _update_distance():
	var t = privot.get_translation()
	t.z -= distance
	set_translation(t)

func _update_process_func():
	# Use physics process if collision are enabled
	if collisions and privot:
		set_physics_process(true)
		set_process(false)
	else:
		set_physics_process(false)
		set_process(true)

func _check_actions(actions=[]):
	if OS.is_debug_build():
		for action in actions:
			if not InputMap.has_action(action):
				print('WARNING: No action \"' + action + '\"')

func set_privot(value):
	privot = value
	_update_process_func()
	if len(trigger_action)!=0:
		_update_views(0)

func set_collisions(value):
	collisions = value
	_update_process_func()

func set_enabled(value):
	enabled = value
	if enabled:
		Input.set_mouse_mode(mouse_mode)
		set_process_input(true)
		_update_process_func()
	else:
		set_process(false)
		set_process_input(false)
		set_physics_process(false)

func set_smoothness(value):
	smoothness = clamp(value, 0.001, 0.999)

func set_distance(value):
	distance = max(0, value)
"

[sub_resource type="BoxShape" id=1]

[sub_resource type="SpatialMaterial" id=3]
albedo_color = Color( 0, 0.321569, 0.580392, 1 )

[sub_resource type="Resource" id=2]
script = ExtResource( 1 )
mode = 0
textures = [ [ ExtResource( 9 ), ExtResource( 5 ), ExtResource( 6 ), ExtResource( 14 ) ], [ ExtResource( 4 ), ExtResource( 7 ), ExtResource( 7 ), ExtResource( 10 ) ] ]

[node name="level_02" type="Spatial"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -12, -4.61078, 3 )
script = ExtResource( 13 )
vehicle_path = NodePath("BlueRov")

[node name="water" parent="." instance=ExtResource( 11 )]
transform = Transform( 128, 0, 0, 0, 128, 0, 0, 0, 140.8, -20.568, 5, -13.625 )

[node name="sun" type="DirectionalLight" parent="."]
transform = Transform( 1, 0, 0, 0, 0.615483, 0.78815, 0, -0.78815, 0.615483, 0, 33.518, -56 )
shadow_enabled = true

[node name="playerCamera" type="Spatial" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 14.7902, 0 )
visible = false
script = SubResource( 4 )

[node name="Camera" type="Camera" parent="playerCamera" groups=["cameras"]]
visible = false
far = 275.0

[node name="cameraPosition" type="Position3D" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 4.21178, 10.2615, 4.21928 )
script = ExtResource( 18 )

[node name="MovingBoat" type="KinematicBody" parent="."]
transform = Transform( 0.608138, 0, -0.793831, 0, 1, 0, 0.793831, 0, 0.608138, -4.9253, 0, -129.756 )
axis_lock_motion_x = true
move_lock_x = true
script = ExtResource( 2 )

[node name="CollisionShape" type="CollisionShape" parent="MovingBoat"]
transform = Transform( 0.742494, 0, 21.8423, 0, 3.15, 0, -1.12421, 0, 14.4259, 26.822, 6.12925, -7.068 )
shape = SubResource( 1 )

[node name="Marlow66" type="MeshInstance" parent="MovingBoat"]
transform = Transform( 0.608138, 0, 0.793831, 0, 1, 0, -0.793831, 0, 0.608138, 15.549, 4.9, -16.148 )
mesh = ExtResource( 15 )
skeleton = NodePath("../..")
material/0 = SubResource( 3 )
material/1 = null
material/2 = null
material/3 = null
material/4 = null
material/5 = null
material/6 = null
material/7 = null
material/8 = null
material/9 = null
material/10 = null
material/11 = null
material/12 = null
material/13 = null
material/14 = null
material/15 = null
material/16 = null
material/17 = null
material/18 = null
material/19 = null
material/20 = null
material/21 = null
material/22 = null
material/23 = null
material/24 = null
material/25 = null
material/26 = null

[node name="HTerrain" type="Spatial" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 2.704, -160, 3, -155 )
script = ExtResource( 3 )
map_scale = Vector3( 0.53, 0.53, 0.51 )
_terrain_data = ExtResource( 12 )
chunk_size = 32
collision_enabled = true
collision_layer = 1
collision_mask = 1
shader_type = "Classic4Lite"
custom_shader = null
custom_globalmap_shader = null
texture_set = SubResource( 2 )
shader_params/u_ground_uv_scale = 20
shader_params/u_depth_blending = true
shader_params/u_triplanar = false
shader_params/u_tile_reduction = Plane( 0, 0, 0, 0 )

[node name="BlueRov" parent="." instance=ExtResource( 16 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -2, -0.9, 4.9 )

[node name="theter" type="Spatial" parent="BlueRov"]
script = ExtResource( 8 )
start = NodePath("../BlueRov")
loops = 100

[node name="AudioStreamPlayer2D" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource( 17 )
autoplay = true
